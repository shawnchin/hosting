/**!
 * qwil-api-transport (built Thu, 13 Jun 2024 10:27:22 GMT)
 *
 * @copyright 2024 Qwil
 * @license MIT
 * @version 0.2.2
 */
!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?s(exports):"function"==typeof define&&define.amd?define(["exports"],s):s((e="undefined"!=typeof globalThis?globalThis:e||self).QwilApiTransport={})}(this,(function(e){"use strict";function s(e){var s,t=e.scope,n=e.window,r=e.windowForEventListening||window,o={},a=[],d={},i=!1,l="__ready__",p=function(e){var s;try{s=JSON.parse(e.data)}catch(e){return}if(s.postis&&s.scope===t){var n=o[s.method];if(n)for(var r=0;r<n.length;r++)n[r].call(null,s.params);else d[s.method]=d[s.method]||[],d[s.method].push(s.params)}};r.addEventListener("message",p,!1);var c={listen:function(e,s){o[e]=o[e]||[],o[e].push(s);var t=d[e];if(t)for(var n=o[e],r=0;r<n.length;r++)for(var a=0;a<t.length;a++)n[r].call(null,t[a]);delete d[e]},send:function(e){var s=e.method;(i||e.method===l)&&n&&"function"==typeof n.postMessage?n.postMessage(JSON.stringify({postis:!0,scope:t,method:s,params:e.params}),"*"):a.push(e)},ready:function(e){i?e():setTimeout((function(){c.ready(e)}),50)},destroy:function(e){clearInterval(s),i=!1,r&&"function"==typeof r.removeEventListener&&r.removeEventListener("message",p),e&&e()}},h=+new Date+Math.random()+"";return s=setInterval((function(){c.send({method:l,params:h})}),50),c.listen(l,(function(e){if(e===h){clearInterval(s),i=!0;for(var t=0;t<a.length;t++)c.send(a[t]);a=[]}else c.send({method:l,params:e})})),c}class t{constructor(e){const{scope:t,window:n}=e;this.postis=s({scope:t,window:n}),this._handleMessage=e=>{console.error("Unhandled incoming message",e)},this.postis.listen("api",(e=>this._handleMessage(e)))}send(e){this.postis.send({method:"api",params:e})}setMessageHandler(e){this._handleMessage=e}destroy(){this.postis.destroy()}}const n="event",r="request",o="response";e.MESSAGE_TYPE_EVENT=n,e.MESSAGE_TYPE_REQUEST=r,e.MESSAGE_TYPE_RESPONSE=o,e.Transport=class{constructor({scope:e,window:s,eventHandler:n,requestHandler:r}={}){this._reqId=0,this._responseHandlers=new Map,this._eventHandler=n,this._requestHandler=r,this._backend=new t({scope:e,window:s}),this._backend.setMessageHandler(this._onMessageReceived.bind(this))}sendEvent(e,s){this._backend.send({type:n,data:{event:e,payload:s}})}sendRequest(e,s){const t=this._reqId++;return new Promise(((n,o)=>{this._responseHandlers.set(t,(({error:e,result:s})=>{void 0!==s?n(s):o(void 0!==e?e:new Error(`Unexpected response format for ${t}`))}));try{this._backend.send({type:r,data:{id:t,request:e,payload:s}})}catch(e){this._responseHandlers.delete(t),o(e)}}))}_onMessageReceived(e){const{type:s,data:t}=e;if(s===n){const{event:s,payload:n}=t;s?this._eventHandler({event:s,payload:n}):console.error("Received message with unknown format",e)}else if(s===r){const{id:e,request:s,payload:n}=t,r=this._requestHandler;r&&r({request:s,payload:n,onComplete:({result:s,error:t})=>{this._backend.send({type:o,data:{id:e,result:s,error:t}})}})}else if(s===o){const{id:e,error:s,result:n}=t,r=this._responseHandlers.get(e);r?(r({error:s,result:n}),this._responseHandlers.delete(e)):console.error(`Unexpected response id ${e}`)}else console.error(`Received message with invalid type ${s}`)}destroy(){this._backend.destroy()}}}));//# sourceMappingURL=qwil-api-transport.min.js.map
